package dacslab.heterosync.ui.desktop

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DeviceInputScreen(
    savedDeviceId: String,
    autoGeneratedDeviceId: String,
    onDeviceCheck: (String, Int, String, String) -> Unit
) {
    // 연결하고자 하는 서버의 BaseURL 정보를 위한 입력.
    var serverIp by remember { mutableStateOf("155.230.34.145") }
    var serverPort by remember { mutableStateOf("8081") }

    // 디바이스 ID (저장된 값 표시)
    var deviceId by remember { mutableStateOf(savedDeviceId) }

    // 디바이스 타입 드롭다운
    var deviceType by remember { mutableStateOf("PSG") }
    var expanded by remember { mutableStateOf(false) }
    val deviceTypes = listOf("PSG", "WATCH", "MOBILE", "PC")

    Row(
        modifier = Modifier.fillMaxSize()
    ) {
        // 좌측 패널
        Card(
            modifier = Modifier
                .weight(0.4f)
                .fillMaxHeight()
                .padding(16.dp),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surfaceVariant
            )
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(24.dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "HeteroSync",
                    fontSize = 36.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = "다중 디바이스 동기화 도구",
                    fontSize = 18.sp,
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
        
        // 우측 입력 패널
        Column(
            modifier = Modifier
                .weight(0.6f)
                .fillMaxHeight()
                .padding(24.dp),
            verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "서버 및 디바이스 설정",
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 24.dp)
            )
            
            // 서버 연결 정보 섹션
            Card(
                modifier = Modifier.fillMaxWidth().padding(bottom = 16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.3f)
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "🌐 연결할 서버 정보",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Medium,
                        modifier = Modifier.padding(bottom = 12.dp)
                    )
                    
                    OutlinedTextField(
                        value = serverIp,
                        onValueChange = { serverIp = it },
                        label = { Text("서버 IP 주소") },
                        modifier = Modifier.fillMaxWidth().padding(bottom = 8.dp),
                        placeholder = { Text("예: 192.168.1.100") }
                    )
                    
                    OutlinedTextField(
                        value = serverPort,
                        onValueChange = { serverPort = it },
                        label = { Text("서버 포트") },
                        modifier = Modifier.fillMaxWidth(),
                        placeholder = { Text("예: 8081") }
                    )
                }
            }
            
            // 현재 디바이스 정보 섹션
            Card(
                modifier = Modifier.fillMaxWidth().padding(bottom = 24.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "📱 현재 디바이스 정보",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Medium,
                        modifier = Modifier.padding(bottom = 12.dp)
                    )

                    OutlinedTextField(
                        value = deviceId,
                        onValueChange = { deviceId = it },
                        label = { Text("디바이스 ID") },
                        modifier = Modifier.fillMaxWidth().padding(bottom = 8.dp),
                        placeholder = { Text("예: $autoGeneratedDeviceId") },
                        supportingText = {
                            Text(
                                text = "기본값: $autoGeneratedDeviceId",
                                fontSize = 12.sp,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                    )

                    ExposedDropdownMenuBox(
                        expanded = expanded,
                        onExpandedChange = { expanded = !expanded },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        OutlinedTextField(
                            value = deviceType,
                            onValueChange = {},
                            readOnly = true,
                            label = { Text("디바이스 타입") },
                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },
                            colors = ExposedDropdownMenuDefaults.outlinedTextFieldColors(),
                            modifier = Modifier
                                .fillMaxWidth()
                                .menuAnchor()
                        )

                        ExposedDropdownMenu(
                            expanded = expanded,
                            onDismissRequest = { expanded = false }
                        ) {
                            deviceTypes.forEach { type ->
                                DropdownMenuItem(
                                    text = { Text(type) },
                                    onClick = {
                                        deviceType = type
                                        expanded = false
                                    }
                                )
                            }
                        }
                    }
                }
            }
            
            Button(
                onClick = {
                    val serverPortInt = serverPort.toIntOrNull() ?: 8081
                    val finalDeviceId = deviceId.ifBlank { autoGeneratedDeviceId }
                    onDeviceCheck(
                        serverIp,
                        serverPortInt,
                        deviceType,
                        finalDeviceId
                    )
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(48.dp),
                enabled = serverIp.isNotBlank()
            ) {
                Text("서버에 연결", fontSize = 16.sp)
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Text(
                text = "서버 정보와 현재 디바이스 정보를 입력하여 동기화 네트워크에 참여하세요",
                fontSize = 14.sp,
                textAlign = TextAlign.Center,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}